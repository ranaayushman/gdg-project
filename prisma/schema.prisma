generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Position {
  TECH_MEMBER
  PUBLIC_RELATIONS
  VIDEO_EDITOR
  CONTENT_WRITER
  GRAPHICS_DESIGNER
  PHOTOGRAPHER
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String        @id @default(cuid())
  name          String?
  username      String        @unique
  password      String?
  role          String        @default("User")
  email         String?       @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  recruitment   Applicant[]
  member        Member?
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Member {
  id         String   @id @default(cuid())
  userId     String?  @unique
  name       String
  email      String   @unique
  role       String
  department String
  status     String   @default("ACTIVE")
  joinDate   DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  user       User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Applicant {
  id              String   @id @default(uuid())
  userId          String?  @unique
  fullName        String
  email           String   @unique
  phoneNumber     String
  linkedIn        String?
  githubPortfolio String?
  branchYear      String
  positions       Position[]
  otherClubs      String?
  weeklyCommitment String
  motivation      String
  gdgPerspective  String
  eventIdeas      String
  contributions   String
  additionalSkills String?
  comments        String?
  createdAt       DateTime @default(now())

  user            User?    @relation(fields: [userId], references: [id], onDelete: Cascade)

  // Role-Specific Profiles
  techProfile         TechProfile?
  prProfile           PRProfile?
  videoProfile        VideoProfile?
  contentProfile      ContentProfile?
  designProfile       DesignProfile?
  photographyProfile  PhotographyProfile?
}

model TechProfile {
  id         String   @id @default(uuid())
  applicant  Applicant @relation(fields: [applicantId], references: [id], onDelete: Cascade)
  applicantId String   @unique
  skills     String[]
  projects   String?
  openSource String?
  codingSolution String?
}

model PRProfile {
  id         String   @id @default(uuid())
  applicant  Applicant @relation(fields: [applicantId], references: [id], onDelete: Cascade)
  applicantId String   @unique
  experience String?
  mockPost   String?
  outreach   String?
  platforms  String?
}

model VideoProfile {
  id         String   @id @default(uuid())
  applicant  Applicant @relation(fields: [applicantId], references: [id], onDelete: Cascade)
  applicantId String   @unique
  tools      String[]
  videoLink  String?
  skills     String?
  improvementIdea String?
}

model ContentProfile {
  id         String   @id @default(uuid())
  applicant  Applicant @relation(fields: [applicantId], references: [id], onDelete: Cascade)
  applicantId String   @unique
  writingExperience String?
  blogIntro  String?
  seoKnowledge String?
  socialWriting String?
}

model DesignProfile {
  id         String   @id @default(uuid())
  applicant  Applicant @relation(fields: [applicantId], references: [id], onDelete: Cascade)
  applicantId String   @unique
  tools      String[]
  portfolio  String?
  comfortableWithUIUX Boolean
  eventPosterIdea String?
}

model PhotographyProfile {
  id         String   @id @default(uuid())
  applicant  Applicant @relation(fields: [applicantId], references: [id], onDelete: Cascade)
  applicantId String   @unique
  skills     String
  experience String?
  portfolio  String?
  cameraModel String?
}
